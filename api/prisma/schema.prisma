// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Status {
  PENDING
  APPROVED
  REJECTED
  PROCESSING
  FINALIZED
  FAULTY
}

model ChangeProposalMetadata {
  id                     String  @id @default(uuid())
  reason                 String
  status                 Status
  gnosisSafeNonce        Int
  txHash                 String  @db.VarChar(66)
  ipfsURL                String  @db.VarChar(100)
  isAutomaticallyCreated Boolean @default(false)

  CategoryOnChainChangeProposal  CategoryOnChainChangeProposal?
  AccessoryOnChainChangeProposal AccessoryOnChainChangeProposal?
}

model CategoryOnChainChangeProposal {
  id String @id @default(uuid())

  CommunityMember           CommunityMember @relation(fields: [communityMemberEthAddress], references: [ethAddress])
  communityMemberEthAddress String

  category String @db.VarChar(32)
  value    Int

  metadata                 ChangeProposalMetadata @relation(fields: [changeProposalMetadataId], references: [id])
  changeProposalMetadataId String                 @unique
}

model AccessoryOnChainChangeProposal {
  id String @id @default(uuid())

  CommunityMember           CommunityMember @relation(fields: [communityMemberEthAddress], references: [ethAddress])
  communityMemberEthAddress String

  accessoryId Int
  unlock      Boolean

  metadata                 ChangeProposalMetadata @relation(fields: [changeProposalMetadataId], references: [id])
  changeProposalMetadataId String                 @unique
}

model CommunityMember {
  id                   String                           @id @default(uuid())
  ethAddress           String                           @unique
  categoryProposals    CategoryOnChainChangeProposal[]
  accessoryProposals   AccessoryOnChainChangeProposal[]
  handles              Handle[]
  offChainAchievements OffChainAchievement[]
}

enum Platform {
  DISCORD
  GITHUB
}

enum Achievement {
  PULL_REQUEST
  COMMUNITY_CALL
}

model Handle {
  id                        String          @id @default(uuid())
  CommunityMember           CommunityMember @relation(fields: [communityMemberEthAddress], references: [ethAddress])
  communityMemberEthAddress String
  platform                  Platform
  identifier                String

  @@unique([platform, identifier], name: "handleIdentifier")
}

model OffChainAchievement {
  id                        String          @id @default(uuid())
  CommunityMember           CommunityMember @relation(fields: [communityMemberEthAddress], references: [ethAddress])
  communityMemberEthAddress String
  platform                  Platform
  achievement               Achievement
  timestamp                 DateTime        @default(now())
}
